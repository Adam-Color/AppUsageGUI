name: Build Installers

on:
  push:
    tags:
      - "v1.0.0"  # change for versioning
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Extract version from _version.py
        id: get_version
        run: echo "VERSION=$(grep -oP '__version__ = "\K[^"]+' src/_version.py)" >> $GITHUB_ENV

      - name: Build Windows Executable
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed --name "App-${{ env.VERSION }}" --add-data "src/core;core" src/main.py
        shell: cmd

      - name: Build macOS Executable
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --windowed --name "App-${{ env.VERSION }}" --add-data "src/core:core" src/main.py

      - name: Setup Inno Setup (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl -o is.exe http://www.jrsoftware.org/download.php/is.exe
          ./is.exe /silent /dir="C:\Inno Setup"

      - name: Create Windows Installer (Inno Setup)
        if: matrix.os == 'windows-latest'
        run: |
          "C:\Inno Setup\ISCC.exe" installer/windows_installer.iss
        shell: cmd

      - name: Install create-dmg (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Create macOS DMG Installer
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
          --overwrite \
          --dmg-title="App-${{ env.VERSION }}" \
          "dist/App-${{ env.VERSION }}" \
          "release/"

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: App-${{ env.VERSION }}-${{ matrix.os }}
          path: release/*

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
